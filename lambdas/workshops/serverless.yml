service: edubit-workshops
org: edubit

frameworkVersion: '3'
configValidationMode: error

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  target-env: ${opt:stage, 'dev'}
  stack-name: ${self:service}-${self:custom.target-env}
  api-gateway-resource: workshops
  api-gateway-allowed-origins: '*'
  # AWS Infrastructure stack names and imports
  ## Database
  commonsDatabaseStackName: ${self:org}-commons-database
  commonsDatabaseLambdaNameImport:
    Fn::ImportValue: ${self:custom.commonsDatabaseStackName}-${self:custom.target-env}-commonsDatabaseLambdaName
  commonsDatabaseQueueNameImport:
    Fn::ImportValue: ${self:custom.commonsDatabaseStackName}-${self:custom.target-env}-commonsDatabaseQueueName
  ## Cognito
  cognitoStackName: ${self:org}-security
  cognitoUserPoolArnImport:
    Fn::ImportValue: ${self:custom.cognitoStackName}-${self:custom.target-env}-cognitoUserPoolArn
  ## Authorizer
  workshopOperationsAuthorizerLambdaName: ${self:custom.stack-name}-authorize-workshop-operation
  # Packaging
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    #keepOutputDirectory: true
  # Serverless offline
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324    # Endpoint where you will publish SQS message
    region: eu-west-1            # Your preferred AWS region
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  serverless-offline:
    httpPort: 4000

provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  environment: ${file(./envs/${self:custom.target-env}.json)}
  timeout: 15
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "sqs:SendMessage"
          Resource: "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  Outputs:
    workshopOperationsAuthorizerLambdaName:
      Value: ${self:custom.workshopOperationsAuthorizerLambdaName}
      Export:
        Name: ${self:custom.stack-name}-workshopOperationsAuthorizerLambdaName

functions:
  createWorkshopDefinition:
    name: ${self:custom.stack-name}-create-workshop-definition
    description: lambda to create workshops' definitions
    handler: handlers/definition/createWorkshopDefinition.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/definitions
          method: post
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getWorkshopDefinition:
    name: ${self:custom.stack-name}-get-workshop-definition
    description: lambda to query workshops' definitions
    handler: handlers/definition/getWorkshopDefinition.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/definitions/{id}
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  updateWorkshopDefinition:
    name: ${self:custom.stack-name}-update-workshop-definition
    description: lambda to update workshops' definitions
    handler: handlers/definition/updateWorkshopDefinition.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/definitions/{id}
          method: patch
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  createWorkshopExecution:
    name: ${self:custom.stack-name}-create-workshop-execution
    description: lambda to create workshops' executions
    handler: handlers/execution/createWorkshopExecution.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/executions
          method: post
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getWorkshopExecution:
    name: ${self:custom.stack-name}-get-workshop-execution
    description: lambda to query workshops' executions
    handler: handlers/execution/getWorkshopExecution.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/executions/{id}
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getWorkshopExecutionTiming:
    name: ${self:custom.stack-name}-get-workshop-execution-timing
    description: lambda to query workshop execution timing
    handler: handlers/execution/getWorkshopExecutionTiming.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/executions/{id}/timing
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getWorkshopExecutionMentors:
    name: ${self:custom.stack-name}-get-mentors-per-workshop-execution
    description: lambda to query mentors for a workshop execution
    handler: handlers/execution/getWorkshopExecutionMentors.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/executions/{id}/mentors
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getWorkshopExecutionByInstitution:
    name: ${self:custom.stack-name}-get-workshop-execution-by-institution
    description: lambda to query workshops' executions by institution
    handler: handlers/execution/getWorkshopExecutionByInstitution.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/executions/institution/{id}
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  updateWorkshopExecution:
    name: ${self:custom.stack-name}-update-workshop-execution
    description: lambda to update workshops' executions
    handler: handlers/execution/updateWorkshopExecution.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/executions/{id}
          method: patch
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}

