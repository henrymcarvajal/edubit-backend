service: edubit-members
org: edubit

frameworkVersion: '3'
configValidationMode: error

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  target-env: ${opt:stage, 'dev'}
  stack-name: ${self:service}-${self:custom.target-env}
  api-gateway-resource-participants: participants
  api-gateway-resource-mentors: mentors
  # AWS Infrastructure stack names and imports
  ## Database
  commonsDatabaseStackName: ${self:org}-commons-database
  commonsDatabaseLambdaNameImport:
    Fn::ImportValue: ${self:custom.commonsDatabaseStackName}-${self:custom.target-env}-commonsDatabaseLambdaName
  commonsDatabaseQueueNameImport:
    Fn::ImportValue: ${self:custom.commonsDatabaseStackName}-${self:custom.target-env}-commonsDatabaseQueueName
  ## Cognito
  cognitoStackName: ${self:org}-security
  cognitoUserPoolArnImport:
    Fn::ImportValue: ${self:custom.cognitoStackName}-${self:custom.target-env}-cognitoUserPoolArn
  # Packaging
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    #keepOutputDirectory: true
  # Serverless offline
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324    # Endpoint where you will publish SQS message
    region: eu-west-1            # Your preferred AWS region
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  serverless-offline:
    httpPort: 4000

provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  environment: ${file(./envs/${self:custom.target-env}.json)}
  timeout: 15
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "sqs:SendMessage"
          Resource: "*"

functions:
  enrollParticipant:
    name: ${self:custom.stack-name}-enroll-participant
    description: lambda to enroll participants in workshops
    handler: handlers/participant/enrollParticipant.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource-participants}/{id}/enrollment
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getParticipant:
    name: ${self:custom.stack-name}-get-participant
    description: lambda to retrieve participants
    handler: handlers/participant/getParticipant.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource-participants}/{id}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  updateParticipant:
    name: ${self:custom.stack-name}-update-participant
    description: lambda to update participants
    handler: handlers/participant/updateParticipant.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource-participants}/{id}
          method: patch
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  deleteParticipant:
    name: ${self:custom.stack-name}-delete-participant
    description: lambda to disable participants
    handler: handlers/participant/deleteParticipant.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource-participants}/{id}
          method: delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  enrollMentor:
    name: ${self:custom.stack-name}-enroll-mentor
    description: lambda to enroll mentors in workshops
    handler: handlers/mentor/enrollMentor.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource-mentors}/{id}/enrollment
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getMentor:
    name: ${self:custom.stack-name}-get-mentor
    description: lambda to retrieve mentors
    handler: handlers/mentor/getMentor.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource-mentors}/{id}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  updateMentor:
    name: ${self:custom.stack-name}-update-mentor
    description: lambda to update mentors
    handler: handlers/mentor/updateMentor.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource-mentors}/{id}
          method: patch
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  deleteMentor:
    name: ${self:custom.stack-name}-delete-mentor
    description: lambda to disable mentora
    handler: handlers/mentor/deleteMentor.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource-mentors}/{id}
          method: delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
