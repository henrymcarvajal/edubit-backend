service: edubit-admin
org: edubit

frameworkVersion: '3'
configValidationMode: error

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  target-env: ${opt:stage, 'dev'}
  stack-name: ${self:service}-${self:custom.target-env}
  api-gateway-resource: admin
  api-gateway-allowed-origins: '*'
  # AWS Infrastructure stack names and imports
  ## Database
  commonsDatabaseStackName: ${self:org}-commons-database
  commonsDatabaseLambdaNameImport:
    Fn::ImportValue: ${self:custom.commonsDatabaseStackName}-${self:custom.target-env}-commonsDatabaseLambdaName
  commonsDatabaseQueueNameImport:
    Fn::ImportValue: ${self:custom.commonsDatabaseStackName}-${self:custom.target-env}-commonsDatabaseQueueName
  ## Cognito
  cognitoStackName: ${self:org}-security
  cognitoUserPoolArnImport:
    Fn::ImportValue: ${self:custom.cognitoStackName}-${self:custom.target-env}-cognitoUserPoolArn
  # Packaging
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceExclude:
        - aws-sdk
    #keepOutputDirectory: true
  # Serverless offline
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324    # Endpoint where you will publish SQS message
    region: eu-west-1            # Your preferred AWS region
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  serverless-offline:
    httpPort: 4000

provider:
  name: aws
  region: us-east-1
  runtime: nodejs18.x
  environment: ${file(./envs/${self:custom.target-env}.json)}
  timeout: 15
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "sqs:SendMessage"
          Resource: "*"

functions:
  getActivity:
    name: ${self:custom.stack-name}-get-activity
    description: lambda to retrieve one activity
    handler: handlers/activity/getActivity.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/activities/{id}
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getActivities:
    name: ${self:custom.stack-name}-get-activities
    description: lambda to retrieve a list of activities
    handler: handlers/activity/getAllActivities.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/activities
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  updateActivity:
    name: ${self:custom.stack-name}-update-activity
    description: lambda to update one activity
    handler: handlers/activity/updateActivity.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/activities/{id}
          method: patch
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  deleteActivity:
    name: ${self:custom.stack-name}-delete-activity
    description: lambda to disable one activity
    handler: handlers/activity/deleteActivity.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/activities/{id}
          method: delete
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getAsset:
    name: ${self:custom.stack-name}-get-asset
    description: lambda to retrieve one asset
    handler: handlers/asset/getAsset.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/assets/{id}
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getAssets:
    name: ${self:custom.stack-name}-get-assets
    description: lambda to retrieve a list of assets
    handler: handlers/asset/getAllAssets.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/assets
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  updateAsset:
    name: ${self:custom.stack-name}-update-asset
    description: lambda to update one asset
    handler: handlers/asset/updateAsset.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/assets/{id}
          method: patch
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  deleteAsset:
    name: ${self:custom.stack-name}-delete-asset
    description: lambda to disable one asset
    handler: handlers/asset/deleteAsset.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/assets/{id}
          method: delete
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getImprovement:
    name: ${self:custom.stack-name}-get-improvement
    description: lambda to retrieve one improvement
    handler: handlers/improvement/getImprovement.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/improvements/{id}
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getImprovements:
    name: ${self:custom.stack-name}-get-improvements
    description: lambda to retrieve a list of improvements
    handler: handlers/improvement/getAllImprovements.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/improvements
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  updateImprovement:
    name: ${self:custom.stack-name}-update-improvement
    description: lambda to update one improvement
    handler: handlers/improvement/updateImprovement.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/improvements/{id}
          method: patch
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  deleteImprovement:
    name: ${self:custom.stack-name}-delete-improvement
    description: lambda to disable one improvement
    handler: handlers/improvement/deleteImprovement.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/improvements/{id}
          method: delete
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getInstitution:
    name: ${self:custom.stack-name}-get-institution
    description: lambda to retrieve one institution
    handler: handlers/institution/getInstitution.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/institutions/{id}
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  getInstitutions:
    name: ${self:custom.stack-name}-get-institutions
    description: lambda to retrieve a list of institutions
    handler: handlers/institution/getAllInstitutions.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/institutions
          method: get
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  updateInstitution:
    name: ${self:custom.stack-name}-update-institution
    description: lambda to update one institution
    handler: handlers/institution/updateInstitution.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/institutions/{id}
          method: patch
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
  deleteInstitution:
    name: ${self:custom.stack-name}-delete-institution
    description: lambda to disable one institution
    handler: handlers/institution/deleteInstitution.handle
    environment:
      region: ${self:provider.region}
      environment: ${self:custom.target-env}
      commons_database_lambda: ${self:custom.commonsDatabaseLambdaNameImport}
      commons_database_queue: ${self:custom.commonsDatabaseQueueNameImport}
    events:
      - http:
          path: ${self:custom.api-gateway-resource}/institutions/{id}
          method: delete
          cors:
            origins:
              - ${self:custom.api-gateway-allowed-origins}
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-Amz-Date
              - X-Amz-Security-Token
            allowCredentials: false
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.cognitoUserPoolArnImport}
